--- scripts/mk_util.py.orig	2018-10-15 13:52:38.000000000 -0600
+++ scripts/mk_util.py	2018-10-31 19:27:59.067093823 -0600
@@ -112,7 +112,7 @@ GUARD_CF=False
 ALWAYS_DYNAMIC_BASE=False
 
 FPMATH="Default"
-FPMATH_FLAGS="-mfpmath=sse -msse -msse2"
+FPMATH_FLAGS=""
 
 
 def check_output(cmd):
@@ -294,10 +294,10 @@ def test_fpmath(cc):
     t = TempFile('tstsse.cpp')
     t.add('int main() { return 42; }\n')
     t.commit()
-    if exec_compiler_cmd([cc, CPPFLAGS, 'tstsse.cpp', LDFLAGS, '-mfpmath=sse -msse -msse2']) == 0:
+    if None:
         FPMATH_FLAGS="-mfpmath=sse -msse -msse2"
         return "SSE2-GCC"
-    elif exec_compiler_cmd([cc, CPPFLAGS, 'tstsse.cpp', LDFLAGS, '-msse -msse2']) == 0:
+    elif None:
         FPMATH_FLAGS="-msse -msse2"
         return "SSE2-CLANG"
     elif exec_compiler_cmd([cc, CPPFLAGS, 'tstsse.cpp', LDFLAGS, '-mfpu=vfp -mfloat-abi=hard']) == 0:
--- src/util/hwf.cpp.orig	2018-10-15 13:52:38.000000000 -0600
+++ src/util/hwf.cpp	2018-10-31 19:28:42.528890124 -0600
@@ -46,9 +46,9 @@ Revision History:
 // clear to the compiler what instructions should be used. E.g., for sqrt(), the Windows compiler selects
 // the x87 FPU, even when /arch:SSE2 is on.
 // Luckily, these are kind of standardized, at least for Windows/Linux/macOS.
-#ifdef __clang__
+//#ifdef __clang__
 #undef USE_INTRINSICS
-#endif
+//#endif
 
 #ifdef USE_INTRINSICS
 #include <emmintrin.h>
--- src/util/mpz.cpp.orig	2018-10-15 13:52:38.000000000 -0600
+++ src/util/mpz.cpp	2018-10-31 19:40:55.519174699 -0600
@@ -30,7 +30,7 @@ Revision History:
 #else
 #error No multi-precision library selected.
 #endif
-#include <immintrin.h> 
+
 
 // Available GCD algorithms
 // #define EUCLID_GCD
